Welcome to Alloy. Prepare to be amazed.
========================================

Titanium Alloys are metals which contain a mixture of Titanium and other chemical elements. Such Alloys have very high tensile strength and toughness (even at extreme temperatures). They are light weight, have extraordinary corrosion resistance and the ability to withstand extreme temperatures [1].  

Alloy for Titanium provides you, the developer, with the ability to run fast, jump high and general code like an amazing superstar. 

Codestrong!

[1] http://en.wikipedia.org/wiki/Titanium_alloy

-------------------------
Now to the serious stuff.
-------------------------

Here's how your Alloy directory is laid out.

models              your model files go here
controllers         your controllers files go here
views               yep, the views go here. you're getting it
styles              your style (.tss) files for your views go here
assets              All files here will be deployed into Resources

Folders not generated by Alloy automatically, but the developer can create and use.

lib                 put your own libraries here and use require('name') to load it
migrations			generated model migrations go here
widgets				pre-built, reusable components for your Ally apps. 

Also, in the root is the alloy.jmk file and config.json.  Alloy.jmk acts like a makefile and can be used to hook into the Alloy compiler to customize the build process. The config.json file is where you can declare runtime contstants, and widget dependencies.
function decodeLine(encoded) {
    var len = encoded.length;
    var index = 0;
    var array = [];
    var lat = 0;
    var lng = 0;
 
    while (index < len) {
        var b;
        var shift = 0;
        var result = 0;
        do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
        } while (b >= 0x20);
 
        var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
        lat += dlat;
 
        shift = 0;
        result = 0;
        do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
        } while (b >= 0x20);
 
        var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
        lng += dlng;
 
        array.push([lat * 1e-5, lng * 1e-5]);
    } 
    return array;
}
function addRoute(obj) {
    var xhr = Ti.Network.createHTTPClient();
    xhr.onload = function (e) {
        var response = this.responseText;
        var json = JSON.parse(response);
 
        var step = json.routes[0].legs[0].steps;
        var intStep = 0, intSteps = step.length, points = [];
        var decodedPolyline, intPoint = 0, intPoints = 0;
        for (intStep = 0; intStep < intSteps; intStep = intStep + 1) {
            decodedPolyline = decodeLine(step[intStep].polyline.points);
            intPoints = decodedPolyline.length;
            for (intPoint = 0; intPoint < intPoints; intPoint = intPoint + 1) {
                if (decodedPolyline[intPoint] != null) {
                    points.push({
                        latitude: decodedPolyline[intPoint][0],
                        longitude: decodedPolyline[intPoint][1]
                    });
                }
            }
        }
 
        var route = {
            name: 'RUTA',
            points: points,
            color: '#c60000',
            width: 4
        };
        if(obj.band) $._V_lugar.removeRoute(route);
         
        
        obj.map.addRoute(route);    
    };
    xhr.onerror = function (e) {
        Ti.API.info('error', JSON.stringify(e));
    };
    var param = [
        'destination=' + obj.stop,
        'origin=' + obj.start,
        'sensor=false'
    ];
    if (obj.region) {
        param.region = obj.region;
    }
    xhr.open('GET', 'http://maps.googleapis.com/maps/api/directions/json?' + param.join('&'));
    xhr.send();
}

/* Toma los atributos al instanciar este controlador */
    var args = arguments[0] || {};
    var latitCenter;
    var longitCenter;
    var latitDelta;
    var longitDelta;
    var rutear=false;
/* Selecciona el título de la fila como 2 textos, celular e email  */
    $._L_info.setText("Nombre: " + (args.name || "Name Unknown") + 
                       "\nHora de atención: " + (args.hour || "Hour Unknown") + 
                       '\nPersona encargada: ' + (args.person || "Person Unknown") + 
                       '\nTeléfono: ' + (args.phone || "Phone Unknown") +
                       '\nDescripción: ' + (args.description || "Description Unknown"));
    $._V_lugar.setRegion({latitude: args.latit, longitude: args.longit, longitudeDelta: 0.01, latitudeDelta: 0.01});
    $._V_lugar.setLocation({latitude: args.latit, longitude: args.longit, longitudeDelta: 0.01, latitudeDelta: 0.01});
    
    //myPlace se ubica en el mismo lugar que place para que no sea visible, si no hasta que el usuario haga click en _B_ruta
    
    $.myPlace.setTitle(args.name);
    $.myPlace.setLatitude(args.latit);
    $.myPlace.setLongitude(args.longit);
    
    
    $.place.setTitle(args.name);
    $.place.setLatitude(args.latit);
    $.place.setLongitude(args.longit);
    $.place.setLeftButton(args.icon);
    
    var band=false;
    Titanium.Geolocation.ACCURACY_NEAREST_TEN_METERS;
    Titanium.Geolocation.addEventListener('location', function(e){
        if (e.error){
            alert('HFL cannot get your current location');
            return;
        }
        var latitude = e.coords.latitude;
        var longitude = e.coords.longitude;
        
        $.myPlace.setLatitude(latitude);
        $.myPlace.setLongitude(longitude);
        
        if (rutear){
            //Se analiza donde debe estar centrada la ventana para tomar ambas coordenadas
            latitCenter = (Number($.place.getLatitude()) + Number($.myPlace.getLatitude()))/2;
            longitCenter = (Number($.place.getLongitude()) + Number($.myPlace.getLongitude()))/2;
             
            //Se adquiere el tamaño de la ventana
            latitDelta = Math.abs(Number($.place.getLatitude()) - Number($.myPlace.getLatitude()));
            longitDelta = Math.abs(Number($.myPlace.getLongitude()) - Number($.place.getLongitude()));
            //Se le da un margen proporcional
            longitDelta *= 2;
            latitDelta *= 2;
             
            $._V_lugar.setRegion({longitudeDelta: longitDelta, latitudeDelta: latitDelta, 
                                    longitude: longitCenter, latitud: latitCenter});
            $._V_lugar.setLocation({longitudeDelta: longitDelta, latitudeDelta: latitDelta, 
                                    longitude: longitCenter, latitud: latitCenter});                  
            addRoute({
                map: $._V_lugar,
                start: $.myPlace.getLatitude() + "," + $.myPlace.getLongitude(),
                stop: $.place.getLatitude() + "," + $.place.getLongitude(),
                band: band //La bandera se envía diciendole si es la primera vez que va a dibujar la ruta o no
            });
            band = true;
        }
    });
    
    $._B_ruta.addEventListener('click', function(e) {
         rutear=true;
         Titanium.Geolocation.getCurrentPosition(function(e){
            if (e.error){
                alert('HFL cannot get your current location');
                return;
            }
            var latitude = e.coords.latitude;
            var longitude = e.coords.longitude;
            $.myPlace.setTitle("YO");
            $.myPlace.setLatitude(latitude);
            $.myPlace.setLongitude(longitude);
            $.myPlace.pincolor = Titanium.Map.ANNOTATION_GREEN;
        });
    });

    
/* Se exporta un método del controlador que abra la ventana */
    
    exports.open = function() {
        $._W_mapaSedeChildDetail.open();
        
    }
    
/* Se cierra la ventana cuando el usuario desea volver a la principal y se quita el evento de localizaciòn para disminuir conumo en batería*/
    $._B_volver.addEventListener('click', function(e) {
        $._W_mapaSedeChildDetail.close();
        Titanium.Geolocation.removeEventListener('location', function(e){});
    });
    $._W_mapaSedeChildDetail.addEventListener('android:back',function(e){
        $._W_mapaSedeChildDetail.close();
    });

